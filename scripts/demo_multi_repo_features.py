#!/usr/bin/env python3
"""
Demo script showing enhanced multi-repository functionality

This script demonstrates:
1. How multiple repositories generate separate charts
2. Repository name formatting and display
3. Combined analysis features
4. File organization and naming
"""

import sys
import os
from datetime import datetime, timedelta

# Add project paths for imports
project_root = os.path.dirname(os.path.dirname(__file__))
sys.path.append(os.path.join(project_root, 'src'))

def demo_repository_name_formatting():
    """Demonstrate repository name formatting"""
    print("üè∑Ô∏è  Repository Name Formatting Demo")
    print("=" * 50)
    
    test_repositories = [
        "cx-switch-health-read-assist",
        "cx-switch-device-health", 
        "network-automation-tools",
        "api-gateway-service",
        "user-management-system",
        "data-analytics-pipeline"
    ]
    
    print("Repository slug ‚Üí Display name:")
    for repo_slug in test_repositories:
        # Simple formatting logic (same as in the analyzer)
        display_name = repo_slug.split('-')
        display_name = [word.capitalize() for word in display_name]
        display_name = ' '.join(display_name)
        
        print(f"  {repo_slug:<30} ‚Üí '{display_name}'")

def demo_multi_repo_chart_separation():
    """Demonstrate how multiple repositories get separate charts"""
    print("\nüìä Multi-Repository Chart Separation Demo")
    print("=" * 50)
    
    example_repos = ["cx-switch-health-read-assist", "cx-switch-device-health"]
    example_user = "manjunath.kallatti@hpe.com"
    
    print(f"üìÅ Analyzing repositories: {', '.join(example_repos)}")
    print(f"üë§ Focus user: {example_user}")
    print(f"üìÖ Date range: Last 7 days")
    
    print("\nüéØ Expected Individual Repository Outputs:")
    for i, repo in enumerate(example_repos, 1):
        display_name = repo.replace('-', ' ').title()
        print(f"\n  {i}. Repository: {display_name}")
        print(f"     Slug: {repo}")
        print("     Generated files:")
        
        files = [
            f"{repo}_timeline_changes.png",
            f"{repo}_user_contributions.png",
            f"{repo}_summary_dashboard.png",
            f"{repo}_daily_changes.csv",
            f"{repo}_user_contributions.csv"
        ]
        
        for file in files:
            print(f"       üìÑ {file}")
    
    print(f"\nüîó Combined Analysis Outputs:")
    combined_files = [
        "combined_analysis_dashboard.png",
        "combined_daily_changes.csv",
        "combined_user_contributions.csv"
    ]
    
    for file in combined_files:
        print(f"     üìÑ {file}")

def demo_chart_content():
    """Demonstrate what each chart contains"""
    print("\nüìà Chart Content Demonstration")
    print("=" * 50)
    
    charts = {
        "Timeline Changes": {
            "filename": "{repo}_timeline_changes.png",
            "content": [
                "üìä Daily additions and deletions over time",
                "üìà Cumulative changes progression", 
                "üè∑Ô∏è  Repository name prominently displayed in title",
                "üë§ User focus indication if specified",
                "üìÖ Date range clearly shown on x-axis"
            ]
        },
        "User Contributions": {
            "filename": "{repo}_user_contributions.png", 
            "content": [
                "üë• Top contributors ranked by total changes",
                "üìä Additions vs deletions breakdown",
                "ü•ß Contribution share pie chart",
                "üè∑Ô∏è  Repository name in chart title",
                "üìà Individual user statistics"
            ]
        },
        "Summary Dashboard": {
            "filename": "{repo}_summary_dashboard.png",
            "content": [
                "üìã Key metrics summary (commits, lines, contributors)",
                "üî• Activity heatmap by day of week",
                "üèÜ Top 5 contributors showcase", 
                "üìà Trend analysis over time",
                "üè∑Ô∏è  Repository name throughout dashboard"
            ]
        },
        "Combined Analysis": {
            "filename": "combined_analysis_dashboard.png",
            "content": [
                "üìä Repository comparison side-by-side",
                "üë§ Cross-repository user activity (if focus user specified)",
                "üìà Timeline comparison across all repositories",
                "üî• Repository activity heatmap",
                "üè∑Ô∏è  All repository names clearly labeled"
            ]
        }
    }
    
    for chart_name, info in charts.items():
        print(f"\nüìä {chart_name}")
        print(f"   File: {info['filename']}")
        print(f"   Contains:")
        for item in info['content']:
            print(f"     ‚Ä¢ {item}")

def demo_api_workflow():
    """Demonstrate the API workflow"""
    print("\nüåê API Workflow Demonstration")
    print("=" * 50)
    
    print("1. üîó Test Connection")
    print("   POST /api/test-connection")
    print("   ‚Üí Validates credentials and server connectivity")
    
    print("\n2. üìù Parse Repository Input")  
    print("   POST /api/repositories/parse")
    print("   ‚Üí Converts user input to structured repository list")
    
    print("\n3. üöÄ Start Analysis")
    print("   POST /api/analyze")
    print("   ‚Üí Creates analysis job and returns job ID")
    
    print("\n4. üìä Monitor Progress")
    print("   GET /api/jobs/{job_id}/status")
    print("   ‚Üí Returns progress percentage and current status")
    
    print("\n5. üìã Get Results")
    print("   GET /api/jobs/{job_id}/results")
    print("   ‚Üí Returns analysis results and file listings")
    
    print("\n6. üìÑ Download Files")
    print("   GET /api/files/{filename}")
    print("   ‚Üí Download individual generated files")

def demo_file_organization():
    """Demonstrate file organization structure"""
    print("\nüìÅ File Organization Demonstration")
    print("=" * 50)
    
    example_repos = ["cx-switch-health-read-assist", "cx-switch-device-health"]
    
    print("üìÇ Output Directory Structure:")
    print("output/")
    
    # Individual repository files
    for repo in example_repos:
        display_name = repo.replace('-', ' ').title()
        print(f"‚îú‚îÄ‚îÄ üìÅ {display_name} files:")
        
        files = [
            f"{repo}_timeline_changes.png",
            f"{repo}_user_contributions.png", 
            f"{repo}_summary_dashboard.png",
            f"{repo}_daily_changes.csv",
            f"{repo}_user_contributions.csv"
        ]
        
        for i, file in enumerate(files):
            prefix = "‚îú‚îÄ‚îÄ" if i < len(files) - 1 else "‚îî‚îÄ‚îÄ"
            print(f"‚îÇ   {prefix} üìÑ {file}")
        print("‚îÇ")
    
    # Combined files
    print("‚îú‚îÄ‚îÄ üìÅ Combined Analysis files:")
    combined_files = [
        "combined_analysis_dashboard.png",
        "combined_daily_changes.csv", 
        "combined_user_contributions.csv"
    ]
    
    for i, file in enumerate(combined_files):
        prefix = "‚îú‚îÄ‚îÄ" if i < len(combined_files) - 1 else "‚îî‚îÄ‚îÄ"
        print(f"    {prefix} üìÑ {file}")

def main():
    """Run all demonstrations"""
    print("üé≠ Enhanced Multi-Repository Bitbucket LOC Analyzer")
    print("üéØ Demonstration of Key Features") 
    print("=" * 80)
    
    demo_repository_name_formatting()
    demo_multi_repo_chart_separation()
    demo_chart_content()
    demo_api_workflow()
    demo_file_organization()
    
    print("\n" + "=" * 80)
    print("‚ú® Key Benefits Demonstrated:")
    print("‚Ä¢ üìä Each repository gets dedicated, clearly-labeled charts")
    print("‚Ä¢ üè∑Ô∏è  Repository names are prominently displayed throughout")
    print("‚Ä¢ üîó Combined analysis maintains individual repository identity")
    print("‚Ä¢ üìÅ Well-organized file structure with intuitive naming")
    print("‚Ä¢ üåê Modern web interface with real-time progress tracking")
    print("‚Ä¢ üß™ Comprehensive API for programmatic access")
    
    print("\nüöÄ Next Steps:")
    print("1. Run: ./scripts/start_analyzer.sh")
    print("2. Open frontend/index.html in your browser")
    print("3. Configure analysis with multiple repositories")
    print("4. Observe separate charts generated for each repository")
    print("5. Review the combined analysis dashboard")

if __name__ == "__main__":
    main()
